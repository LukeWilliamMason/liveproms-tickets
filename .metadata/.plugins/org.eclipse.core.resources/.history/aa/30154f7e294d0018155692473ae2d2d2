package application;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.Properties;

import javafx.collections.FXCollections;
import javafx.collections.ObservableList;

import java.sql.*;
import java.util.Properties;

public class Datasource   {
	
        public static final String url = "jdbc:mysql://livepromotio.mysql.database.azure.com/ticket_system";
        public static final String user = "lukelive@livepromotio";
        public static final String password = "Live1972";
        
        public static final String TABLE_USERS = "users";
        public static final String COLUMN_USER_USERNAME = "username";
        public static final String COLUMN_USER_PASSWORD = "password";
        
        public static final String TABLE_EVENTS = "events";
        public static final String COLUMN_EVENT_NAME = "eventName";
        public static final String COLUMN_EVENT_STARTDATETIME = "eventStartDateTime";
        public static final String COLUMN_EVENT_ENDDATETIME = "eventEndDateTime";
        public static final String COLUMN_EVENT_CREATED = "eventCreated";
        public static final String COLUMN_EVENT_INFO = "eventInfo";
        public static final String COLUMN_EVENT_TC = "eventTC";
        
        public static final String TABLE_VENUES = "venues";
        public static final String COLUMN_VENUE_NAME = "venueName";
        public static final String COLUMN_VENUE_ADDRESSLINEONE = "venueAddressLineOne";
        public static final String COLUMN_VENUE_ADDRESSLINETWO = "venueAddressLineTwo";        
        public static final String COLUMN_VENUE_POSTCODE = "venuePostcode";
        public static final String COLUMN_VENUE_TOWNCITY = "venueTownCity";
        public static final String COLUMN_VENUE_TEL = "venueTelephone";
        public static final String COLUMN_VENUE_EMAIL = "venueEmail";
        
        public static final String TABLE_TICKETS = "tickets";
        public static final String COLUMN_TICKET_NAME = "ticketName";
        public static final String COLUMN_TICKET_PRICE = "ticketPrice";
        public static final String COLUMN_TICKET_QUANTITY = "ticketQuantity";
        public static final String COLUMN_TICKET_INFO = "ticketInfo";
        
        public static final String TABLE_ORDERS = "orders";
        public static final String COLUMN_ORDER_ID = "orderID";
        public static final String COLUMN_ORDER_DATE = "orderDate";
        public static final String COLUMN_ORDER_VALID = "orderValid";
        public static final String COLUMN_ORDER_INVITATION = "invitation";
        public static final String COLUMN_ORDER_EMAIL = "orderEmail";
        
        
        private Connection conn;
        
        public boolean open(){
        try{
            // Set connection properties.
            Properties properties = new Properties();
            properties.setProperty("user", user);
            properties.setProperty("password", password);
            properties.setProperty("useSSL", "true");
            properties.setProperty("verifyServerCertificate", "true");
            properties.setProperty("requireSSL", "false");

            // get connection
            conn = DriverManager.getConnection(url, properties);
          	System.out.println("Successfully connected to database");
        	return true;
        } catch(SQLException e){
        	System.out.println("Failed to connect to database");
        	return false;
        }
        }
        
        public void close() {
        	try{
        		if(conn != null){
        			conn.close();
        		}
        	} catch(SQLException e) {
        		System.out.println("Couldn't close connection" + e.getMessage());
        	}
        }
        
        public ObservableList<Event> queryEvents(){
        	
        	try(Statement statement = conn.createStatement();
        	ResultSet results = statement.executeQuery("SELECT * FROM " + TABLE_EVENTS + 
        			" INNER JOIN " + TABLE_VENUES + " WHERE " + TABLE_EVENTS + "." + COLUMN_VENUE_NAME + " = " + TABLE_VENUES + "." + COLUMN_VENUE_NAME)){   		
        		
        		ObservableList<Event> events = FXCollections.observableArrayList();        		
        		while(results.next()){
        			Event event = new Event();
        			event.setEventName(results.getString(COLUMN_EVENT_NAME));
        			event.setEventStartDateTime(results.getString(COLUMN_EVENT_STARTDATETIME));
        			event.setEventEndDateTime(results.getString(COLUMN_EVENT_ENDDATETIME));
        			event.setVenueName(results.getString(COLUMN_VENUE_NAME));
        			event.setVenueAddressLineOne(results.getString(COLUMN_VENUE_ADDRESSLINEONE));
           			event.setVenueAddressLineTwo(results.getString(COLUMN_VENUE_ADDRESSLINETWO));
           			event.setVenueTownCity(results.getString(COLUMN_VENUE_TOWNCITY));
           			event.setVenuePostcode(results.getString(COLUMN_VENUE_POSTCODE));
           			event.setVenueTel(results.getString(COLUMN_VENUE_TEL));
           			event.setVenueEmail(results.getString(COLUMN_VENUE_EMAIL));
           			event.setEventTC(results.getString(COLUMN_EVENT_TC));
           			event.setEventInfo(results.getString(COLUMN_EVENT_INFO));
        			events.add(event);
        		}
        		
        		return events;
        		
        	} catch(SQLException e) {
        		System.out.println("Query failed:" + e.getMessage());
        		return null;     
        	}
       }
        
        public void addEvents(){
        	
        	try(Statement statement = conn.createStatement();
        	ResultSet results = statement.executeQuery("SELECT * FROM " + TABLE_EVENTS + 
        			" INNER JOIN " + TABLE_VENUES + " WHERE " + TABLE_EVENTS + "." + COLUMN_VENUE_NAME + " = " + TABLE_VENUES + "." + COLUMN_VENUE_NAME)){   		
        		
        		ObservableList<Event> events = FXCollections.observableArrayList();        		
        		while(results.next()){
        			Event event = new Event();
        			event.setEventName(results.getString(COLUMN_EVENT_NAME));
        			event.setEventStartDateTime(results.getString(COLUMN_EVENT_STARTDATETIME));
        			event.setEventEndDateTime(results.getString(COLUMN_EVENT_ENDDATETIME));
        			event.setVenueName(results.getString(COLUMN_VENUE_NAME));
        			event.setVenueAddressLineOne(results.getString(COLUMN_VENUE_ADDRESSLINEONE));
           			event.setVenueAddressLineTwo(results.getString(COLUMN_VENUE_ADDRESSLINETWO));
           			event.setVenueTownCity(results.getString(COLUMN_VENUE_TOWNCITY));
           			event.setVenuePostcode(results.getString(COLUMN_VENUE_POSTCODE));
           			event.setVenueTel(results.getString(COLUMN_VENUE_TEL));
           			event.setVenueEmail(results.getString(COLUMN_VENUE_EMAIL));
           			event.setEventTC(results.getString(COLUMN_EVENT_TC));
           			event.setEventInfo(results.getString(COLUMN_EVENT_INFO));
        			events.add(event);
        		}
        		
        		return events;
        		
        	} catch(SQLException e) {
        		System.out.println("Query failed:" + e.getMessage());
        		return null;     
        	}
       }
        


        public List<User> queryUsers(){
        	
        	try(Statement statement = conn.createStatement();
        	ResultSet results = statement.executeQuery("SELECT * FROM " + TABLE_USERS)){   		
        		
        		List<User> users = new ArrayList<>();        		
        		while(results.next()){
        			User user = new User();
        			user.setUsername(results.getString(COLUMN_USER_USERNAME));
        			user.setPassword(results.getString(COLUMN_USER_PASSWORD));
        			users.add(user);
        		}
        		
        		return users;
        		
        	} catch(SQLException e) {
        		System.out.println("Query failed:" + e.getMessage());
        		return null;     
        	}
       }
        
        public List<Ticket> queryTicket(){
        	try(Statement statement = conn.createStatement();
        	ResultSet results = statement.executeQuery("SELECT * FROM " + TABLE_TICKETS)){
        		
        		List<Ticket> tickets = new ArrayList<>();
        		while(results.next()){
        			Ticket ticket = new Ticket();
        			ticket.setEventName(results.getString(COLUMN_EVENT_NAME));
        			ticket.setTicketInfo(results.getString(COLUMN_TICKET_INFO));
        			ticket.setTicketName(results.getString(COLUMN_TICKET_NAME));
        			ticket.setTicketPrice(results.getInt(COLUMN_TICKET_PRICE));
        			ticket.setTicketQuantity(results.getInt(COLUMN_TICKET_QUANTITY));
        			tickets.add(ticket);
        		}
        		
        		return tickets;
        	} catch(SQLException e) {
        		System.out.println("Query failed:" + e.getMessage());
        		return null;       	
        }
        }
        
        public List<Order> queryOrders(){
        	try(Statement statement = conn.createStatement();
        	ResultSet results = statement.executeQuery("SELECT * FROM " + TABLE_ORDERS)){
        		
        		List<Order> orders = new ArrayList<>();
        		while(results.next()){
        			Order order = new Order();
        			order.setOrderID(results.getString(COLUMN_ORDER_ID));
        			order.setTicketName(results.getString(COLUMN_TICKET_NAME));
        			order.setOrderDate(results.getString(COLUMN_ORDER_DATE));
        			order.setOrderValid(results.getString(COLUMN_ORDER_VALID));
        			order.setInvitation(results.getString(COLUMN_ORDER_INVITATION));
        			order.setOrderEmail(results.getString(COLUMN_ORDER_EMAIL));
        			orders.add(order);
        		}
        		
        		return orders;
        	} catch(SQLException e) {
        		System.out.println("Query failed:" + e.getMessage());
        		return null;       	
        }
        }
}
