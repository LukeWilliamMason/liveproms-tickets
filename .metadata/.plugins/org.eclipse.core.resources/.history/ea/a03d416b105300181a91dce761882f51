package application;

import java.io.File;
import java.sql.Timestamp;
import java.util.*;
import java.util.concurrent.ThreadLocalRandom;

import javax.activation.DataHandler;
import javax.activation.DataSource;
import javax.activation.FileDataSource;
import javax.mail.*;
import javax.mail.internet.*;
import javax.mail.internet.MimeMessage;

import com.google.zxing.BarcodeFormat;
import com.google.zxing.EncodeHintType;
import com.google.zxing.MultiFormatWriter;
import com.google.zxing.client.j2se.MatrixToImageWriter;
import com.google.zxing.common.BitMatrix;
import com.google.zxing.qrcode.decoder.ErrorCorrectionLevel;
import com.jfoenix.controls.JFXComboBox;

import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.fxml.FXML;
import javafx.scene.control.Alert;
import javafx.scene.control.Alert.AlertType;
import javafx.scene.control.Button;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import javafx.scene.control.TextField;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.stage.DirectoryChooser;
import javafx.stage.FileChooser;

public class TicketsController extends MainWindowController{
	
	@FXML private JFXComboBox<String> ticketSelection;
	@FXML private Button sendInvitationButton;
	@FXML private TextField emailField, tempFolderField;
	@FXML private Button browse;
	@FXML private TableColumn<Order, String> orderIdColumn, orderTypeColumn, orderEmailColumn, orderDateColumn, orderValidColumn;
	@FXML private TableColumn<Ticket, String> ticketTypeNameColumn, ticketTypePriceColumn, ticketTypeQuantityColumn;
	@FXML TableView<Order> orderView ;
	@FXML TableView<Ticket> ticketView;
	public static File  d;
	
	private Main main;
	
	private static ObservableList<String> ticketName = FXCollections.observableArrayList();
	public static ObservableList<String> getTicketName() { return ticketName; }
	private static ObservableList<Order> ticketData = FXCollections.observableArrayList();
	public static ObservableList<Order> getTicketData() { return ticketData; }
	private static ObservableList<Ticket> ticketTypeData = FXCollections.observableArrayList();
	public static ObservableList<Ticket> getTicketTypeData() { return ticketTypeData; }
	
	
	public void setMain(Main main){
		this.main = main;
		eventView.setItems(getEventData());
	}
	
	public void initialize(){
		Datasource datasource = new Datasource();
		datasource.open();	
		eventData = datasource.queryEvents();
		orderIdColumn.setCellValueFactory(new PropertyValueFactory<Order, String>("orderID"));
		orderTypeColumn.setCellValueFactory(new PropertyValueFactory<Order, String>("ticketName"));
		orderEmailColumn.setCellValueFactory(new PropertyValueFactory<Order, String>("orderEmail"));
		orderDateColumn.setCellValueFactory(new PropertyValueFactory<Order, String>("orderDate"));
		orderValidColumn.setCellValueFactory(new PropertyValueFactory<Order, String>("orderValid"));
		
		ticketTypeData = datasource.queryTickets();
		ticketTypeNameColumn.setCellValueFactory(new PropertyValueFactory<Ticket,String>("ticketName"));
		ticketTypePriceColumn.setCellValueFactory(new PropertyValueFactory<Ticket,String>("ticketPrice"));
		ticketTypeQuantityColumn.setCellValueFactory(new PropertyValueFactory<Ticket,String>("ticketQuantity"));
		
		
		
		
		eventView.setColumnResizePolicy(TableView.CONSTRAINED_RESIZE_POLICY);
		eventNameColumn.setCellValueFactory(new PropertyValueFactory<Event, String>("EventName"));
		eventView.getSelectionModel().selectedItemProperty().addListener(
				(observable, oldValue, newValue) -> showInfo(newValue));
		
		ticketData = datasource.queryOrders();
		ticketView.setItems(ticketTypeData);
		orderView.setItems(ticketData);
		ticketName = datasource.queryTicketName();
		ticketSelection.setItems(ticketName);
	}
	
	
	public void showInfo(Event event){		
		eventNameLabel.setText(event.getEventName());
		
	}
	
	@FXML
	public void handleButton(){
	try{
		Datasource datasource = new Datasource();
		datasource.open();
		List<Order> orders = datasource.queryOrders();
		datasource.close();
		String code = "";
		for(Order order : orders){
			code = generateCode();
		if(code.equals(order.getOrderID())){
			break;
		}
		}
	generate_qr(code,code);
	String filename = d + "/" +code +".png";

	MimeBodyPart messageBodyPart = new MimeBodyPart();
	Multipart multipart = new MimeMultipart();
	
	String host = "smtp.gmail.com";
	String user = "lukewilliammason@gmail.com";
	String password = "spamman3";
	String to = emailField.getText().toString();
	String from = "lukewilliammason@gmail.com";
	String subject = ticketSelection.getValue().toString();
	String messageText = "This QR code is your ticket. Please present this at the gate when you arrive at the event.";
	boolean sessionDebug = false;
	
	DataSource source = new FileDataSource(filename);
	messageBodyPart.setDataHandler(new DataHandler(source));
	messageBodyPart.setFileName(user + " " + ticketSelection.getValue().toString() + ".png");
	multipart.addBodyPart(messageBodyPart);
	


    Properties props = System.getProperties();

    props.put("mail.smtp.starttls.enable", "true");
    props.put("mail.smtp.host", host);
    props.put("mail.smtp.port", "587");
    props.put("mail.smtp.auth", "true");
    props.put("mail.smtp.starttls.required", "true");

    java.security.Security.addProvider(new com.sun.net.ssl.internal.ssl.Provider());
    Session mailSession = Session.getDefaultInstance(props, null);
    mailSession.setDebug(sessionDebug);
    Message msg = new MimeMessage(mailSession);
    msg.setFrom(new InternetAddress(from));
    InternetAddress[] address = {new InternetAddress(to)};
    msg.setRecipients(Message.RecipientType.TO, address);
    msg.setSubject(subject);
    msg.setSentDate(new Date());
    msg.setContent(multipart, messageText);

   Transport transport = mailSession.getTransport("smtp");
   transport.connect(host, user, password);
   transport.sendMessage(msg, msg.getAllRecipients());
   transport.close();
   System.out.println("Message sent successfully!");
   
   Order order = new Order();
   
   order.setOrderID(code);
   order.setTicketName(ticketSelection.getValue().toString());
   Calendar cal = Calendar.getInstance();
   java.util.Date utilDate = new java.util.Date();
   cal.setTime(utilDate);
   cal.set(Calendar.MILLISECOND, 0);
   order.setOrderDate(new java.sql.Timestamp(utilDate.getTime()).toString());
   order.setOrderEmail(to);
   order.setOrderValid("Y");
   order.setInvitation("Y");
   datasource.open();
   datasource.insertOrder(order);
   datasource.close();
	
   
   
   
   Alert alert = new Alert(AlertType.INFORMATION);
   alert.setTitle(subject);
   alert.setHeaderText("Invitation successfully sent.");
   alert.setContentText("An email has been sent to " + to);
   alert.showAndWait();
   
}catch(Exception ex)
{
    System.out.println(ex);
}
	
	}
	
	public static void generate_qr(String image_name,String qrCodeData) {
        try {
            String filePath = d+"/"+image_name+".png";
            String charset = "UTF-8"; // or "ISO-8859-1"
            Map < EncodeHintType, ErrorCorrectionLevel > hintMap = new HashMap < EncodeHintType, ErrorCorrectionLevel > ();
            hintMap.put(EncodeHintType.ERROR_CORRECTION, ErrorCorrectionLevel.L);
            BitMatrix matrix = new MultiFormatWriter().encode(
                new String(qrCodeData.getBytes(charset), charset),
                BarcodeFormat.QR_CODE, 200, 200, hintMap);
            MatrixToImageWriter.writeToFile(matrix, filePath.substring(filePath
                .lastIndexOf('.') + 1), new File(filePath));
            System.out.println("QR Code image created successfully!");
        } catch (Exception e) {
            System.err.println(e);
        }
    }
	
	public String generateCode(){
		String code = "";
		Random r = new Random();

	    String alphabet = "abcdefghijklmnopqrstuvwxyz";
	    String numbers = "1234567890";
	    for (int i = 0; i < 2; i++) {
	        code = code + alphabet.charAt(r.nextInt(alphabet.length()));
	    }
	    for (int i = 0; i < 3; i++) {
	    	int randomNum = ThreadLocalRandom.current().nextInt(0, 9 + 1);
	        code = code + randomNum;
	    }
	    return code;
	}
	
	@FXML
	public void browse(){
		DirectoryChooser dc = new DirectoryChooser();
		d = dc.showDialog(null);
		
		if(d != null){
			tempFolderField.setText(d.toString() + "/");
		}
	}
	
	@FXML
	public void deleteOrder(){
		int i = orderView.getSelectionModel().getSelectedIndex();
		this.getTicketData().remove(i);
	}
	
	@FXML
	public void deleteTicket(){
		Datasource datasource = new Datasource();
		int i = ticketView.getSelectionModel().getSelectedIndex();

		TicketsController.getTicketTypeData().remove(i);
	}
	

}
